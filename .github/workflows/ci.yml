name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  # 백엔드 테스트 및 빌드
  backend-test:
    runs-on: ubuntu-latest
    name: Backend Tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
          
      - name: Install backend dependencies
        run: |
          cd backend
          npm ci
          
      - name: Run backend linting
        run: |
          cd backend
          npm run lint
          
      - name: Run backend tests
        run: |
          cd backend
          npm run test
        env:
          NODE_ENV: test
          
      - name: Build backend
        run: |
          cd backend
          npm run build
          
      - name: Upload backend build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-dist
          path: backend/dist
          retention-days: 1

  # 프론트엔드 테스트 및 빌드
  frontend-test:
    runs-on: ubuntu-latest
    name: Frontend Tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci --legacy-peer-deps
          
      - name: Run frontend linting
        run: |
          cd frontend
          npm run lint || true # 린팅 실패해도 계속 진행
          
      - name: Build frontend
        run: |
          cd frontend
          npm run build
        env:
          REACT_APP_API_BASE_URL: ${{ vars.REACT_APP_API_BASE_URL || 'http://localhost:5000' }}
          GENERATE_SOURCEMAP: false
          
      - name: Upload frontend build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/build
          retention-days: 1

  # 통합 테스트
  integration-test:
    runs-on: ubuntu-latest
    name: Integration Tests
    needs: [backend-test, frontend-test]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: |
          npm install -g axios
          cd backend && npm ci
          
      - name: Download backend artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-dist
          path: backend/dist
          
      - name: Start backend server
        run: |
          cd backend
          npm start &
          sleep 10
        env:
          NODE_ENV: test
          PORT: 5000
          JWT_SECRET: test-jwt-secret-for-ci-pipeline
          JWT_REFRESH_SECRET: test-refresh-secret-for-ci-pipeline
          SUPABASE_URL: ${{ secrets.TEST_SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.TEST_SUPABASE_KEY }}
          CORS_ORIGIN: "*"
          BCRYPT_SALT_ROUNDS: 10
          QR_CODE_SECRET: test-qr-secret-for-ci-pipeline
          
      - name: Run integration tests
        run: |
          node test-integration.js
        env:
          API_BASE_URL: http://localhost:5000

  # Docker 이미지 빌드 (main 브랜치에서만)
  docker-build:
    runs-on: ubuntu-latest
    name: Build Docker Images
    needs: [backend-test, frontend-test, integration-test]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: false
          tags: attendance-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Build frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: false
          tags: attendance-frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # 보안 스캔
  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    needs: [backend-test, frontend-test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # 배포 (main 브랜치에서 성공 시)
  deploy:
    runs-on: ubuntu-latest
    name: Deploy to Production
    needs: [docker-build, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to Railway (Backend)
        run: |
          echo "🚂 Railway 백엔드 배포는 자동으로 진행됩니다."
          echo "Repository가 Railway와 연결되어 있습니다."
          
      - name: Deploy to Vercel (Frontend)
        run: |
          echo "🌐 Vercel 프론트엔드 배포는 자동으로 진행됩니다."
          echo "Repository가 Vercel과 연결되어 있습니다."
          
      - name: Health Check
        run: |
          echo "⏰ 배포 완료 후 Health Check를 수행합니다."
          sleep 60
          # curl -f ${{ vars.BACKEND_URL }}/health || exit 1
          # curl -f ${{ vars.FRONTEND_URL }}/health || exit 1
          
      - name: Notify deployment
        run: |
          echo "✅ 배포가 성공적으로 완료되었습니다!"
          echo "Backend: ${{ vars.BACKEND_URL }}"
          echo "Frontend: ${{ vars.FRONTEND_URL }}"